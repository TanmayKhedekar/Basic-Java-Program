📘 SQL Practice Guide: From Basics to Advanced with Code Examples
Author: Tanmay Khedekar
Date: July 2025
Database: dsa (MySQL)
Topics Covered: CRUD, Clauses, Joins, Subqueries, Procedures, Triggers, and more.

🛠️ Table Setup and Sample Data
sql
Copy
Edit
USE dsa;

CREATE TABLE employees (
  employee_id INT PRIMARY KEY,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  department VARCHAR(50),
  salary DECIMAL(10, 2)
);

INSERT INTO employees (employee_id, first_name, last_name, department, salary)
VALUES
  (1, 'John', 'Doe', 'HR', 50000.00),
  (2, 'Jane', 'Smith', 'IT', 60000.00),
  (3, 'Alice', 'Johnson', 'Finance', 55000.00),
  (4, 'Bob', 'Williams', 'IT', 62000.00),
  (5, 'Emily', 'Brown', 'HR', 48000.00);
📊 SQL Basics
➕ Add Column
sql
Copy
Edit
ALTER TABLE employees
ADD COLUMN new_column INT;
🔍 View All Records
sql
Copy
Edit
SELECT * FROM employees;
🔁 Distinct Values
sql
Copy
Edit
SELECT DISTINCT department FROM employees;
🎯 Filtering Data
🔹 LIMIT & OFFSET
sql
Copy
Edit
SELECT * FROM employees LIMIT 2;
SELECT * FROM employees LIMIT 5 OFFSET 3;
🔹 FETCH First N Rows
sql
Copy
Edit
SELECT * FROM employees FETCH FIRST 3 ROWS ONLY;
🔹 WHERE, LIKE, IN, BETWEEN, IS NULL
sql
Copy
Edit
SELECT * FROM employees WHERE department = 'IT';
SELECT * FROM employees WHERE first_name LIKE 'J%';
SELECT * FROM employees WHERE department IN ('HR', 'Finance');
SELECT * FROM employees WHERE salary BETWEEN 50000 AND 60000;
SELECT * FROM employees WHERE department IS NULL;
📌 Data Manipulation
🧾 Conditional Case
sql
Copy
Edit
SELECT first_name, last_name,
  CASE
    WHEN salary > 60000 THEN 'High'
    WHEN salary > 50000 THEN 'Medium'
    ELSE 'Low'
  END AS salary_category
FROM employees;
✏️ Update Records
sql
Copy
Edit
UPDATE employees
SET salary = 50000
WHERE employee_id = 1;
❌ Delete Records
sql
Copy
Edit
DELETE FROM employees
WHERE employee_id = 5;
🔍 Operators
sql
Copy
Edit
SELECT * FROM employees WHERE salary > 50000 AND department = 'IT';
SELECT * FROM employees WHERE department = 'HR' OR department = 'Finance';
SELECT * FROM employees WHERE NOT department = 'IT';
📦 Aggregations
sql
Copy
Edit
SELECT COUNT(*) FROM employees;
SELECT SUM(salary) FROM employees;
SELECT AVG(salary) FROM employees;
SELECT MIN(salary) FROM employees;
SELECT MAX(salary) FROM employees;
📊 GROUP BY and HAVING
sql
Copy
Edit
SELECT department, COUNT(*) AS employee_count
FROM employees
GROUP BY department;

SELECT department, AVG(salary) AS avg_salary
FROM employees
GROUP BY department
HAVING avg_salary > 50000;
🔗 JOINS
(Assuming a departments table exists with department_id)

sql
Copy
Edit
-- INNER JOIN
SELECT * FROM employees
INNER JOIN departments ON employees.department_id = departments.department_id;

-- LEFT JOIN
SELECT * FROM employees
LEFT JOIN departments ON employees.department_id = departments.department_id;

-- RIGHT JOIN
SELECT * FROM employees
RIGHT JOIN departments ON employees.department_id = departments.department_id;

-- FULL OUTER JOIN
SELECT * FROM employees
FULL OUTER JOIN departments ON employees.department_id = departments.department_id;

-- CROSS JOIN
SELECT * FROM employees
CROSS JOIN departments;
🔁 SELF JOIN
sql
Copy
Edit
SELECT e1.first_name AS Employee, e2.first_name AS Manager
FROM employees e1, employees e2
WHERE e1.employee_id = e2.manager_id;
🔄 Subqueries
sql
Copy
Edit
-- Single-row Subquery
SELECT first_name, last_name
FROM employees
WHERE salary = (SELECT MAX(salary) FROM employees);

-- Multiple-row Subquery
SELECT department_name
FROM departments
WHERE department_id IN (SELECT department_id FROM employees);

-- Correlated Subquery
SELECT first_name, last_name
FROM employees e
WHERE salary > (SELECT AVG(salary) FROM employees WHERE department = e.department);

-- Nested Subquery
SELECT first_name, last_name
FROM employees
WHERE department_id IN (
  SELECT department_id FROM departments WHERE department_name = 'IT'
);
🚀 Advanced Features
📌 Stored Procedure
sql
Copy
Edit
DELIMITER //
CREATE PROCEDURE get_employee_count()
BEGIN
  SELECT COUNT(*) FROM employees;
END;
//
DELIMITER ;
🔔 Trigger
sql
Copy
Edit
DELIMITER //
CREATE TRIGGER before_employee_insert
BEFORE INSERT ON employees
FOR EACH ROW
BEGIN
  SET NEW.creation_date = NOW();
END;
//
DELIMITER ;
🧮 User Defined Function (UDF)
sql
Copy
Edit
DELIMITER //
CREATE FUNCTION calculate_bonus(salary DECIMAL)
RETURNS DECIMAL
BEGIN
  RETURN salary * 0.1;
END;
//
DELIMITER ;
📋 CTE (Common Table Expression)
sql
Copy
Edit
WITH high_paid_employees AS (
  SELECT * FROM employees WHERE salary > 60000
)
SELECT * FROM high_paid_employees;
✅ Summary
This SQL practice guide walks through:

Table creation and data manipulation

Core SQL commands (SELECT, WHERE, JOIN, GROUP BY)

Advanced tools like Stored Procedures, Triggers, Functions, and CTEs

📌 Ideal for interview prep, project backends, or just mastering SQL hands-on!

🔗 Share this on GitHub or LinkedIn
You can copy this into a file called SQL_Practice_Guide.md and upload it to:

GitHub repository (example: github.com/yourusername/sql-practice)

Publish on LinkedIn articles

Or post on dev.to / Hashnode as a blog
